import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_regression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import xgboost as xgb
import time

def generate_data(n_samples=1000, n_features=10, noise=0.1):
    X, y = make_regression(n_samples=n_samples, n_features=n_features, noise=noise, random_state=42)
    return X, y

def compare_models():
    X, y = generate_data()
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    print("Training SimpleGBT...")
    simple_gbt = SimpleGBT(n_estimators=100, learning_rate=0.1, max_depth=3)
    start_time = time.time()
    simple_gbt.fit(X_train, y_train)
    simple_train_time = time.time() - start_time
    y_pred_simple = simple_gbt.predict(X_test)
    print("SimpleGBT training time: {:.4f} seconds".format(simple_train_time))

    print("Training XGBoost...")
    xgb_model = xgb.XGBRegressor(n_estimators=100, learning_rate=0.1, max_depth=3, random_state=42)
    start_time = time.time()
    xgb_model.fit(X_train, y_train)
    xgb_train_time = time.time() - start_time
    y_pred_xgb = xgb_model.predict(X_test)
    print("XGBoost training time: {:.4f} seconds".format(xgb_train_time))

    def calculate_metrics(y_true, y_pred, model_name):
        mse = mean_squared_error(y_true, y_pred)
        rmse = np.sqrt(mse)
        mae = mean_absolute_error(y_true, y_pred)
        r2 = r2_score(y_true, y_pred)
        print(f"{model_name} Metrics:")
        print(f"  MSE: {mse:.4f}")
        print(f"  RMSE: {rmse:.4f}")
        print(f"  MAE: {mae:.4f}")
        print(f"  RÂ²: {r2:.4f}")
        print()

    calculate_metrics(y_test, y_pred_simple, "SimpleGBT")
    calculate_metrics(y_test, y_pred_xgb, "XGBoost")

    plt.figure(figsize=(10, 6))
    plt.scatter(y_test, y_pred_simple, alpha=0.5, label="SimpleGBT")
    plt.scatter(y_test, y_pred_xgb, alpha=0.5, label="XGBoost")
    plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', lw=2)
    plt.xlabel('True Values')
    plt.ylabel('Predictions')
    plt.title('True vs Predicted Values')
    plt.legend()
    plt.show()

compare_models()
