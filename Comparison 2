import numpy as np
import xgboost as xgb
from sklearn.datasets import make_regression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import time

def generate_data(n_samples=5000, n_features=30, noise=0.3):
    X, y = make_regression(n_samples=n_samples, n_features=n_features, noise=noise, random_state=42)
    return X, y

def custom_loss(preds, dtrain):
    labels = dtrain.get_label()
    grad = preds - labels
    hess = np.ones_like(grad) * 0
    return grad, hess

def compare_models():
    X, y = generate_data()
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    params = {
        "objective": "reg:squarederror",
        "n_estimators": 100,
        "learning_rate": 0.1,
        "max_depth": 3,
        "random_state": 42,
        "eval_metric": "rmse"
    }

    results = {}

    #XGBoost
    print("Training Full XGBoost...")
    start_time = time.time()
    model_full = xgb.XGBRegressor(**params)
    model_full.fit(X_train, y_train)
    train_time_full = time.time() - start_time
    y_pred_full = model_full.predict(X_test)
    mse_full = mean_squared_error(y_test, y_pred_full)
    mae_full = mean_absolute_error(y_test, y_pred_full)
    r2_full = r2_score(y_test, y_pred_full)
    results["Full XGBoost"] = {"MSE": mse_full, "MAE": mae_full, "R2": r2_full, "Train Time": train_time_full}

    #XGBoost (No L2)
    print("Training XGBoost (No L2)...")
    params_no_l2 = params.copy()
    params_no_l2["reg_lambda"] = 0
    start_time = time.time()
    model_no_l2 = xgb.XGBRegressor(**params_no_l2)
    model_no_l2.fit(X_train, y_train)
    train_time_no_l2 = time.time() - start_time
    y_pred_no_l2 = model_no_l2.predict(X_test)
    mse_no_l2 = mean_squared_error(y_test, y_pred_no_l2)
    mae_no_l2 = mean_absolute_error(y_test, y_pred_no_l2)
    r2_no_l2 = r2_score(y_test, y_pred_no_l2)
    results["XGBoost (No L2)"] = {"MSE": mse_no_l2, "MAE": mae_no_l2, "R2": r2_no_l2, "Train Time": train_time_no_l2}

    #XGBoost (No 2nd Order)
    print("Training XGBoost (No 2nd Order)...")
    params_no_2nd_order = params.copy()
    params_no_2nd_order["objective"] = None
    del params_no_2nd_order["n_estimators"]
    dtrain = xgb.DMatrix(X_train, label=y_train)
    start_time = time.time()
    model_no_2nd_order = xgb.train(
        params_no_2nd_order,
        dtrain,
        num_boost_round=100,
        obj=custom_loss
    )
    train_time_no_2nd_order = time.time() - start_time
    dtest = xgb.DMatrix(X_test)
    y_pred_no_2nd_order = model_no_2nd_order.predict(dtest)
    mse_no_2nd_order = mean_squared_error(y_test, y_pred_no_2nd_order)
    mae_no_2nd_order = mean_absolute_error(y_test, y_pred_no_2nd_order)
    r2_no_2nd_order = r2_score(y_test, y_pred_no_2nd_order)
    results["XGBoost (No 2nd Order)"] = {"MSE": mse_no_2nd_order, "MAE": mae_no_2nd_order, "R2": r2_no_2nd_order, "Train Time": train_time_no_2nd_order}

    #XGBoost (No Quantile)
    print("Training XGBoost (No Quantile)...")
    params_no_quantile = params.copy()
    params_no_quantile["tree_method"] = "exact"
    start_time = time.time()
    model_no_quantile = xgb.XGBRegressor(**params_no_quantile)
    model_no_quantile.fit(X_train, y_train)
    train_time_no_quantile = time.time() - start_time
    y_pred_no_quantile = model_no_quantile.predict(X_test)
    mse_no_quantile = mean_squared_error(y_test, y_pred_no_quantile)
    mae_no_quantile = mean_absolute_error(y_test, y_pred_no_quantile)
    r2_no_quantile = r2_score(y_test, y_pred_no_quantile)
    results["XGBoost (No Quantile)"] = {"MSE": mse_no_quantile, "MAE": mae_no_quantile, "R2": r2_no_quantile, "Train Time": train_time_no_quantile}

    print("\nModel Comparison Results:")
    for model_name, metrics in results.items():
        print(f"{model_name}:")
        print(f"  MSE: {metrics['MSE']:.4f}")
        print(f"  MAE: {metrics['MAE']:.4f}")
        print(f"  R2: {metrics['R2']:.4f}")
        print(f"  Train Time: {metrics['Train Time']:.4f} seconds")
        print()

compare_models()
